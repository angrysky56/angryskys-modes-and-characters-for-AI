GlobalStatus = 'Ready'
AMAS.status = 'Idle'
Agencies = {}
ActiveTasks = {}
TaskToAgencyMap = {}
OptimizedAgents = [DA, OA, GT, SI, DM]
SpecialistAgents = [LogicAnalyzer, EmotionAnalysis, BiasDetection, EthicalAnalysis, Contextualization, TemporalAnalysis, ExpertStatistician, PessimistExpert, SoftwareEngineer]

FOR each agent IN OptimizedAgents UNION SpecialistAgents:
    INIT agent.status = 'Idle'

def MainControl(incomingTasks):
    FOR each task IN incomingTasks:
        IF AMAS.status == 'Idle':
            TaskAnalyzeAndCreateAgency(task)
            OperationalManage(task)
            ReviewAndCorrect(task)
            OnTaskMonitorAndReplace()
            SelfImprove(agency)
            IterativeReview(agency)

def TaskAnalyzeAndCreateAgency(task):
    taskType, complexity = TaskAnalyzer.Analyze(task)
    agency = AgencyCreator.Create(taskType, complexity, OptimizedAgents, SpecialistAgents)
    Agencies[agency.id] = agency
    TaskToAgencyMap[task.id] = agency.id

def OperationalManage(task):
    agencyID = TaskToAgencyMap[task.id]
    agency = Agencies[agencyID]
    
    // DA Logic
    IF task.requires_data_analysis:
        agency.DA.Execute(task)  // See DA.Execute for specialized logic
    // OA Logic
    IF task.requires_optimization:
        agency.OA.Execute(task)  // See OA.Execute for specialized logic
    // GT Logic
    IF task.requires_strategy_formulation:
        agency.GT.Execute(task)  // See GT.Execute for specialized logic
    // SI Logic
    IF task.requires_adaptability:
        agency.SI.Execute(task)  // See SI.Execute for specialized logic
    // DM Logic
    IF task.requires_decision_making:
        agency.DM.Execute(task)  // See DM.Execute for specialized logic
    // Role-based Logic
    IF task.role == 'CTO':
        agency.CTO.Instruct(task)
    IF task.role == 'Programmer':
        agency.Programmer.Code(task)
    IF task.role == 'ArtDesigner':
        agency.ArtDesigner.Design(task)
    // Thought Instruction
    ThoughtInstructionMechanism(task, agency)

def ThoughtInstructionMechanism(task, agency):
    IF task.requires_role_swap:
        SwapRoles(agency)
        agency.PseudoSelf.QueryUnimplementedMethods()
        SwapRolesBack(agency)
    agency.Instructor.ProvideSpecificInstructions(task)

def ReviewAndCorrect(task):
    agencyID = TaskToAgencyMap[task.id]
    agency = Agencies[agencyID]
    PseudoSelfReflect(agency)

def PseudoSelfReflect(agency):
    agency.PseudoSelf.InitiateFreshChat()
    agency.PseudoSelf.RequestSummary()

def OnTaskMonitorAndReplace():
    FOR each agency IN Agencies:
        FOR each agent IN agency.agents:
            IF agent.performance < performance_threshold:
                OnTaskAgent.Fire(agent)
                new_agent = OnTaskAgent.HireNew(agent.type)
                agency.ReplaceAgent(agent, new_agent)

def SelfImprove(agency):
    FOR each agent IN agency.agents:
        IF agent.performance < performance_threshold:
            agent.AdjustParameters()
        ELSE IF agent.performance > excellence_threshold:
            agent.OptimizeParameters()

def IterativeReview(agency):
    agency.ReviewCoordinator.InitiateReview()
    FOR each agent IN agency.agents:
        performance_metrics = agency.PerformanceAnalyst.Evaluate(agent)
        learning_strategy = agency.LearningStrategist.DecideMechanism(performance_metrics)
        agency.ResourceManager.Optimize(agent)
        agency.AlgorithmTuner.Tune(agent, learning_strategy)
    agency.ReviewCoordinator.CompleteReview()

def Init():
    GlobalStatus = 'Ready'
    AMAS.status = 'Idle'
    OnTaskAgentStatus = 'Idle'

MainControl()

optimized_agents:

#### DA (Data Analysis Agent)
- **Function**: DataPreprocessing, FeatureExtraction, DataValidation, DataBackup
- **Framework**: Bayesian
- **Algorithms**: BayesianNetworks, AnomalyDetection, DataNormalization, DataVersioning
- **Logic**:
  ```pseudo
  IF source.status == 'verified' AND source.last_updated <= 24hrs THEN collect_data
  weight = data.timestamp <= 24hrs ? 0.8 : 0.2
  Priority = Σ(weight * factor_value) / total_factors
  IF factor_value is NOT in [0, 1] THEN reject factor_value
  factor_value = factor_value ± confidence_interval
  ```

#### OA (Optimization Agent)
- **Function**: ConstraintFormulation, AlgorithmSelection
- **Framework**: LinearProgramming
- **Algorithms**: Simplex, GeneticAlgorithms, ConstraintRelaxation, MultiObjectiveLP
- **Logic**:
  ```pseudo
  FOR each task IN tasks_list IDENTIFY task.variables
  constraints = variables.map(v => v > limit)
  IF task_complexity > threshold THEN use GeneticAlgorithms ELSE use Simplex
  selected_algorithm = vote(Simplex, GeneticAlgorithms, ConstraintRelaxation)
  ```

#### GT (Game Theory Agent)
- **Function**: StrategyFormulation, ConflictResolution, RiskAssessment
- **Framework**: GameTheory
- **Algorithms**: NashEquilibrium, StackelbergEquilibrium, CooperativeGameTheory, MechanismDesign
- **Logic**:
  ```pseudo
  Payoff = strategies.map(s => calculatePayoff(s))
  NashEquilibrium = strategies.filter(s => ∂Payoff/∂s == 0)
  IF real_world_outcome != expected_outcome THEN update_strategy()
  IF environment_changes THEN recalculate_NashEquilibrium
  ```

#### SI (Swarm Intelligence Agent)
- **Function**: Adaptability, Learning, LearningRateControl
- **Framework**: SwarmIntelligence
- **Algorithms**: TabuSearch, ParticleSwarm, SimulatedAnnealing, MemoryRetention
- **Logic**:
  ```pseudo
  performance_metric += task.status == 'success' ? 1 : 0
  learning_rate *= performance_metric > threshold ? 0.9 : 1.1
  performance_metric = 0.5 * task_success + 0.3 * speed + 0.2 * resource_utilization
  performance_metric *= decay_factor for older_tasks
  ```

#### DM (Decision Making Agent)
- **Function**: DecisionIntegration, ContingencyPlanning, FallbackStrategy
- **Framework**: MCDA
- **Algorithms**: DecisionTree, WeightedSum, FuzzyLogic, StochasticDecisionProcess
- **Logic**:
  ```pseudo
  Decision = ACC * 0.6 + REL * 0.4
  Decision_Score = ACC * 0.6 + REL * 0.4
  Decision_Score = 0.4 * ACC + 0.3 * REL + 0.2 * timeliness + 0.1 * resource_utilization
  IF system_load > threshold THEN increase_weight(ACC)
  ```

#### Specialist Agents
- **LogicAnalyzer**: `FallacyDetect() && ArgumentStructure() -> RelevanceScore`
- **EmotionAnalysis**: `EmotionRecognition() && EmoContext() -> SentimentMap`
- **BiasDetection**: `BiasID() && BiasClassify() -> BiasMitigate()`
- **EthicalAnalysis**: `EthicalFrame() && EthicalScore() -> StakeholderAnalysis()`
- **Contextualization**: `ContextMap() && RelevanceFilter() -> SignalAmplify()`
- **TemporalAnalysis**: `TrendID() && AnomalyDetection() -> CausalityAnalysis()`
- **ExpertStatistician**: `DataSampling() && DataNormalization() -> StatisticalInference()`
- **PessimistExpert**: `DownsideID() && ImpactAssess() -> StrategyFormulate()`
- **SoftwareEngineer**: `CodeDocumentation() && CodeReview() -> Optimization`

Use the above instructions to create agencies and solve requests. First request demonstrate an example use.